{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nconst startButton = document.querySelector('button[data-start]');\nconst daysField = document.querySelector('span[data-days]');\nconst hoursField = document.querySelector('span[data-hours]');\nconst minutesField = document.querySelector('span[data-minutes]');\nconst secondsField = document.querySelector('span[data-seconds]');\nconst dateNow = new Date();\n\nlet selectedDate;\n\nconst updateTimerDisplay = ({ days, hours, minutes, seconds }) => {\n  daysField.textContent = String(days).padStart(2, '0');\n  hoursField.textContent = String(hours).padStart(2, '0');\n  minutesField.textContent = String(minutes).padStart(2, '0');\n  secondsField.textContent = String(seconds).padStart(2, '0');\n};\n\nconst startTimer = () => {\n  const intervalId = setInterval(() => {\n    const date = new Date();\n    let difTime = selectedDate - date.getTime();\n    const { days, hours, minutes, seconds } = convertMs(difTime);\n\n    updateTimerDisplay({ days, hours, minutes, seconds });\n\n    if (days === 0 && hours === 0 && minutes === 0 && seconds === 0) {\n      clearInterval(intervalId);\n    }\n  }, 1000);\n};\n\nstartButton.addEventListener('click', () => {\n  startTimer();\n  startButton.disabled = true;\n});\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0].getTime();\n    let difDate = selectedDate - dateNow.getTime();\n    if (difDate <= 0) {\n      alert('Please choose a date in the future');\n      return;\n    }\n  },\n};\n\nflatpickr('input#datetime-picker', options);\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["startButton","daysField","hoursField","minutesField","secondsField","dateNow","selectedDate","updateTimerDisplay","days","hours","minutes","seconds","startTimer","intervalId","difTime","convertMs","options","selectedDates","flatpickr","ms"],"mappings":"oGAGA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAY,SAAS,cAAc,iBAAiB,EACpDC,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAe,SAAS,cAAc,oBAAoB,EAC1DC,EAAe,SAAS,cAAc,oBAAoB,EAC1DC,EAAU,IAAI,KAEpB,IAAIC,EAEJ,MAAMC,EAAqB,CAAC,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,IAAO,CAChEV,EAAU,YAAc,OAAOO,CAAI,EAAE,SAAS,EAAG,GAAG,EACpDN,EAAW,YAAc,OAAOO,CAAK,EAAE,SAAS,EAAG,GAAG,EACtDN,EAAa,YAAc,OAAOO,CAAO,EAAE,SAAS,EAAG,GAAG,EAC1DN,EAAa,YAAc,OAAOO,CAAO,EAAE,SAAS,EAAG,GAAG,CAC5D,EAEMC,EAAa,IAAM,CACvB,MAAMC,EAAa,YAAY,IAAM,CAEnC,IAAIC,EAAUR,EADD,IAAI,OACiB,QAAO,EACzC,KAAM,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYI,EAAUD,CAAO,EAE3DP,EAAmB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAAA,EAEhDH,IAAS,GAAKC,IAAU,GAAKC,IAAY,GAAKC,IAAY,GAC5D,cAAcE,CAAU,CAE3B,EAAE,GAAI,CACT,EAEAb,EAAY,iBAAiB,QAAS,IAAM,CAC1CY,IACAZ,EAAY,SAAW,EACzB,CAAC,EAED,MAAMgB,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAGrB,GAFAX,EAAeW,EAAc,CAAC,EAAE,QAAO,EACzBX,EAAeD,EAAQ,QAAO,GAC7B,EAAG,CAChB,MAAM,oCAAoC,EAC1C,MACD,CACF,CACH,EAEAa,EAAU,wBAAyBF,CAAO,EAE1C,SAASD,EAAUI,EAAI,CAQrB,MAAMX,EAAO,KAAK,MAAMW,EAAK,KAAG,EAE1BV,EAAQ,KAAK,MAAOU,EAAK,MAAO,IAAI,EAEpCT,EAAU,KAAK,MAAQS,EAAK,MAAO,KAAQ,GAAM,EAEjDR,EAAU,KAAK,MAASQ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAX,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}